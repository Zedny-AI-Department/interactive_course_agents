"""Models for LLM-generated responses and AI output structures.

This module contains models specifically designed to handle responses
from Large Language Models, including structured paragraph generation
and visual content alignment tasks.
"""

from typing import List, Optional
from pydantic import Field

from .base_models import StrictBaseModel, KeywordItem
from .visual_content_models import ChartContent, ImageContent, TableContent


class LLMVisualItem(StrictBaseModel):
    """Visual content item generated by LLM with positioning information.

    Represents a visual element that the LLM has determined should be
    placed at a specific point in the content, identified by a trigger sentence.

    Attributes:
        type: The type of visual content (chart, image, or table)
        content: The actual visual content data
        start_sentence: The sentence that triggers this visual to appear
    """

    type: str = Field(description="The type of visual content")
    content: ChartContent | ImageContent | TableContent = Field(
        description="The visual content data"
    )
    start_sentence: str = Field(
        description="The sentence that should trigger this visual to appear",
    )


class LLMParagraphBase(StrictBaseModel):
    """Base structure for LLM-generated paragraphs.

    Contains the core information that the LLM generates for each
    paragraph including text content, indexing, and keywords.

    Attributes:
        paragraph_index: Sequential index of the paragraph
        paragraph_text: The actual text content of the paragraph
        keywords: Important terms and concepts identified in the paragraph
    """

    paragraph_index: int = Field(description="The sequential index of the paragraph")
    paragraph_text: str = Field(description="The text content of the paragraph")
    keywords: Optional[List[KeywordItem]] = Field(
        default=[], description="Key terms and concepts in the paragraph"
    )


class LLMParagraphWithVisual(LLMParagraphBase):
    """LLM-generated paragraph that may include visual content.

    Extends the base paragraph structure to include optional visual
    elements that the LLM has determined should accompany the text.

    Attributes:
        visuals: Optional visual content to display with this paragraph
    """

    visuals: Optional[LLMVisualItem] = Field(
        default=None, description="Visual content associated with this paragraph"
    )


class LLMParagraphList(StrictBaseModel):
    """Collection of LLM-generated paragraphs with visual content.

    Represents the complete output from an LLM content generation task,
    containing multiple paragraphs with their associated visual elements.

    Attributes:
        paragraphs: List of generated paragraphs with optional visuals
    """

    paragraphs: List[LLMParagraphWithVisual] = Field(
        description="List of generated paragraphs with visual content"
    )


class LLMVisualReference(StrictBaseModel):
    """Reference to an existing visual for alignment tasks.

    Used when the LLM needs to align paragraph content with pre-existing
    visual elements extracted from external sources like PDFs.

    Attributes:
        visual_index: Index of the visual in the source collection
        description: Description of the visual content
        start_sentence: Sentence that should trigger this visual
    """

    visual_index: int = Field(description="Index of the referenced visual")
    description: str = Field(description="Description of the visual content")
    start_sentence: str = Field(
        description="Sentence that triggers this visual to appear"
    )


class LLMParagraphWithVisualRef(LLMParagraphBase):
    """LLM-generated paragraph with reference to external visual.

    Used for alignment tasks where paragraphs need to be matched with
    pre-existing visual content rather than generating new visuals.

    Attributes:
        visual_reference: Reference to an existing visual element
    """

    visual_reference: Optional[LLMVisualReference] = Field(
        default=None, description="Reference to existing visual content"
    )


class LLMVisualAlignmentResult(StrictBaseModel):
    """Result of LLM visual alignment task.

    Contains paragraphs that have been aligned with existing visual
    content, typically used when processing external documents.

    Attributes:
        paragraphs: List of paragraphs with visual alignments
    """

    paragraphs: List[LLMParagraphWithVisualRef] = Field(
        description="Paragraphs aligned with existing visual content"
    )
